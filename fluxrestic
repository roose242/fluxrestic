#!/usr/bin/env python3

# fluxrestic v1.1.1

# Copyright (c) 2022 Steffen Reinecke
#
# This software is distributed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all 
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
# SOFTWARE.

import os
import sys 
import json
import time
import datetime
from argparse import ArgumentParser
from influxdb_client import InfluxDBClient, Point, Dialect
from influxdb_client.client.write_api import SYNCHRONOUS

parser = ArgumentParser()
parser.add_argument("-t", "--token", dest="token", help="influx auth token", default=os.getenv('INFLUX_TOKEN'))
parser.add_argument("-o", "--org", dest="org", help="influx organisation", metavar="organisation", default=os.getenv('INFLUX_ORG'))
parser.add_argument("-b", "--bucket", dest="bucket", help="target bucket", default=os.getenv('INFLUX_BUCKET'))
parser.add_argument("-s", "--host", dest="host", help="hostname", default=os.getenv('INFLUX_HOST'))
parser.add_argument("-m", "--measurement", dest="measurement", help='influx measurement, e.g. restic or restic_%%type', default="restic")
parser.add_argument("-r", "--repository", dest="repo", help="restic repository (optional)", default=os.getenv('RESTIC_REPOSITORY'))
parser.add_argument("-c", "--resticserver", dest="reposerver", help="restic server (optional)")
parser.add_argument("-i", "--interval", dest="interval", help="status update interval (default: 5s)", default=5, type=int)
parser.add_argument("-d", "--debug", default=False, action="store_true", help="output debug information")
parser.add_argument("-p", "--progress", default=False, action="store_true", help="output restic backup progress")
args = parser.parse_args()

if args.token is None:
    print("token parameter is missing")
    sys.exit(1)
if args.org is None:
    print("org parameter is missing")
    sys.exit(1)
if args.bucket is None:
    print("bucket is missing")
    sys.exit(1)
if args.host is None:
    args.host="http://localhost:8086"

def progress(count, total, suffix=''):
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))
    percents = round(100.0 * count / float(total), 1)
    bar = '#' * filled_len + ' ' * (bar_len - filled_len)
    sys.stdout.write('[%s] %s%s ...%s\r' % (bar, percents, '%', suffix))
    sys.stdout.flush()

client = InfluxDBClient(url=args.host, token=args.token, org=args.org) # , verify_ssl=False
write_api = client.write_api(write_options=SYNCHRONOUS)

lastreq = 0
files_done = 0

for line in sys.stdin:
    
    try:
        data = json.loads(line)
    except ValueError:  # includes simplejson.decoder.JSONDecodeError
        print('Decoding JSON has failed! Have you added the --json parameter to the restic command?')
        print(line)
    
    if type(data) is not dict:
        print('data type not supported:')
        print(line)
        continue
    
    if data['message_type'] in ["verbose_status"]:
        # no support yet
        continue
    
    measurement = args.measurement.replace('%type', data['message_type'])
    
    tags = {"type":data['message_type']}
    if args.repo is not None:
        tags['restic_repository'] = args.repo
    if args.reposerver is not None:
        tags['restic_server'] = args.reposerver
    if 'snapshot_id' in data:
        tags['snapshot_id'] = data['snapshot_id']
    if 'percent_done' in data:
        data['percent_done'] = float(data['percent_done'] * 100)

    # flatten data
    for k, v in data.items():
        if type(v) is dict: # e.g. message_type error
            data[k] = ",".join([f'{key}: {value}' for key, value in v.items()])
        elif type(v) is list: # e.g. current_files
            data[k] = ",".join(v)

    record = {"measurement":measurement, "tags":tags, "fields":data}
    
    now = time.time()
    
    if data['message_type'] == "status":
        if args.progress:
            if 'percent_done' in data:
                percent_done = data['percent_done']
            else:
                percent_done = 0
            suffix = str(percent_done) + '%, '
            if 'files_done' in data:
                files_done = data['files_done']
            else:
                files_done = 0
            if 'bytes_done' in data:
                bytes_done = data['bytes_done']
            else:
                bytes_done = 0
            if 'total_files' in data:
                suffix = suffix + ', ' + str(files_done) + '/' + str(data['total_files']) + ' files done'
            else:
                suffix = suffix + ', ' + str(files_done) + ' files done'
            if 'total_bytes' in data:
                suffix = suffix + ', ' + str(bytes_done) + '/' + str(data['total_bytes'])
            if "seconds_elapsed" in data:
                suffix = ', elapsed: ' + str(datetime.timedelta(seconds=data['seconds_elapsed']))
            if "seconds_remaining" in data:
                 suffix = suffix + ', remaining: ' + str(datetime.timedelta(seconds=data['seconds_remaining']))

            # not yet supported:
            #{'message_type': 'verbose_status', 'action': 'unchanged', 'item': '/mnt/foo/readme.txt', 'duration': 0, 'data_size': 0, 'metadata_size': 0, 'total_files': 0}
            #{'message_type': 'status', 'action': 'scan_finished', 'item': '', 'duration': 1.252341785, 'data_size': 52010305307, 'metadata_size': 0, 'total_files': 19965}
            
            progress(percent_done, 100, suffix=suffix)
        
        if (now - lastreq) > args.interval:
            lastreq = now
        else:
            if args.debug:
                print('skip ' + str(record))
            continue
    
    if data['message_type'] == "summary":
        if args.progress:
            data_copy = data.copy()
            del data_copy['snapshot_id']
            del data_copy['message_type']
            print('snapshot saved with id: ' + data['snapshot_id'] + ', ' + ', '.join([f'{key}: {value}' for key, value in data_copy.items()]))

    res = write_api.write(bucket=args.bucket, record=[record], time_precision='ms')
    if args.debug:
        print('write ' + str(record))
